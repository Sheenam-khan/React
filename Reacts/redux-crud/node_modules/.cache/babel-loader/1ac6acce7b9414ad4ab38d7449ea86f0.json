{"ast":null,"code":"var _jsxFileName = \"/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components2/FormComponent.js\";\nimport React, { useEffect, useState } from 'react';\nimport Form from 'antd/es/form';\nimport Input from 'antd/es/input';\nimport Button from 'antd/es/button';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nconst FormComponent = props => {\n  const [form] = Form.useForm(); //  const [values, setValues] = useState('');\n  // useEffect(() => {\n  //     if (props.currentId != 0){\n  //         setValues({\n  //             ...props.postMessageList.find(x => x._id == props.currentId)\n  //         })\n  //     }\n  // }, [props.currentId])\n\n  const onFinish = values => {\n    console.log('Success:', values);\n\n    const onSuccess = () => {\n      setValues(...values);\n      onReset();\n    };\n\n    if (values.length !== null) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess); // else\n      //     props.updatePostMessage(props.currentId, values, onSuccess)\n      // \n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      title: 'Hardik Motwani',\n      message: 'Ahmedabad No. 1 Lake Park'\n    });\n  };\n\n  return React.createElement(Form, Object.assign({}, layout, {\n    form: form,\n    name: \"control-hooks\",\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: 'Please input your username!'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    label: \"Message\",\n    name: \"message\",\n    rules: [{\n      required: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Button, {\n    htmlType: \"button\",\n    onClick: onReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(Button, {\n    type: \"link\",\n    htmlType: \"button\",\n    onClick: onFill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Fill form\")));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components2/FormComponent.js"],"names":["React","useEffect","useState","Form","Input","Button","connect","actions","layout","labelCol","span","wrapperCol","tailLayout","offset","FormComponent","props","form","useForm","onFinish","values","console","log","onSuccess","setValues","onReset","length","currentId","createPostMessage","onFinishFailed","errorInfo","resetFields","onFill","setFieldsValue","title","message","required","mapStateToProps","state","postMessageList","postMessage","list","mapActionToProps","create","updatePostMessage","update"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport Form from 'antd/es/form';\r\nimport Input from 'antd/es/input';\r\nimport Button from 'antd/es/button';\r\n \r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\n \r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst FormComponent = (props) => {\r\n    const [form] = Form.useForm();\r\n    //  const [values, setValues] = useState('');\r\n    // useEffect(() => {\r\n    //     if (props.currentId != 0){\r\n    //         setValues({\r\n    //             ...props.postMessageList.find(x => x._id == props.currentId)\r\n    //         })\r\n        \r\n    //     }\r\n    // }, [props.currentId])\r\n\r\n    const onFinish = values => {\r\n        console.log('Success:', values);\r\n        const onSuccess = () => {\r\n            setValues(...values)\r\n            onReset()\r\n        }\r\n        if(values.length!==null){\r\n            if (props.currentId == 0)\r\n            props.createPostMessage(values, onSuccess)\r\n        // else\r\n        //     props.updatePostMessage(props.currentId, values, onSuccess)\r\n        // \r\n    }\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    };\r\n\r\n    const onFill = () => {\r\n        form.setFieldsValue({\r\n            title: 'Hardik Motwani',\r\n          \r\n            message: 'Ahmedabad No. 1 Lake Park',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            form={form}\r\n            name=\"control-hooks\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    }\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n \r\n\r\n            <Form.Item\r\n                label=\"Message\"\r\n                name=\"message\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    }\r\n                ]}\r\n            >\r\n                <Input.TextArea />\r\n            </Form.Item>\r\n \r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button htmlType=\"button\" onClick={onReset}>\r\n                    Reset\r\n                </Button>\r\n                <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n                    Fill form\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createPostMessage: actions.create,\r\n    updatePostMessage: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);\r\n"]},"metadata":{},"sourceType":"module"}