{"ast":null,"code":"var _jsxFileName = \"/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components2/FormComponent.js\";\nimport React, { useEffect, useState } from 'react';\nimport Form from 'antd/es/form';\nimport Input from 'antd/es/input';\nimport Button from 'antd/es/button';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nconst FormComponent = ({ ...props\n}) => {\n  const [form] = Form.useForm();\n  const [add, setAdd] = useState(false);\n  const [values, setValues] = useState({ ...props.currentId\n  });\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n    }\n  }, [props.currentId]);\n  console.log(props.currentId, props);\n\n  const onFinish = values => {\n    console.log('Success:', values);\n\n    const onSuccess = () => {\n      setAdd(true);\n      onReset();\n    }; //  if  (props.currentId == 0 ){props.createPostMessage(values, onSuccess)}\n\n\n    if (!props.currentId == 0) {\n      props.updatePostMessage(props.currentId, values, onSuccess);\n      props.currentId = 0;\n      console.log(props.currentId);\n    }\n\n    if (props.currentId === 'undefined') {\n      console.log(props.currentId);\n      props.createPostMessage(values, onSuccess);\n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    setValues('');\n    props.setCurrentId(0);\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      title: 'Hardik Motwani',\n      message: 'Ahmedabad No. 1 Lake Park'\n    });\n  };\n\n  return React.createElement(Form, Object.assign({}, layout, {\n    form: form,\n    name: \"control-hooks\",\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: 'Please input your username!'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    label: \"Message\",\n    name: \"message\",\n    rules: [{\n      required: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Button, {\n    htmlType: \"button\",\n    onClick: onReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(Button, {\n    type: \"link\",\n    htmlType: \"button\",\n    onClick: onFill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Fill form\")));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components2/FormComponent.js"],"names":["React","useEffect","useState","Form","Input","Button","connect","actions","layout","labelCol","span","wrapperCol","tailLayout","offset","FormComponent","props","form","useForm","add","setAdd","values","setValues","currentId","postMessageList","find","x","_id","console","log","onFinish","onSuccess","onReset","updatePostMessage","createPostMessage","onFinishFailed","errorInfo","resetFields","setCurrentId","onFill","setFieldsValue","title","message","required","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAE;AADA,GADC;AAIXC,EAAAA,UAAU,EAAE;AACRD,IAAAA,IAAI,EAAE;AADE;AAJD,CAAf;AASA,MAAME,UAAU,GAAG;AACfD,EAAAA,UAAU,EAAE;AACRE,IAAAA,MAAM,EAAE,CADA;AAERH,IAAAA,IAAI,EAAE;AAFE;AADG,CAAnB;;AAOA,MAAMI,aAAa,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AAClC,QAAM,CAACC,IAAD,IAASb,IAAI,CAACc,OAAL,EAAf;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBjB,QAAQ,CAAC,KAAD,CAA9B;AACC,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAC,GAAGa,KAAK,CAACO;AAAV,GAAD,CAApC;AACDrB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,KAAK,CAACO,SAAN,IAAmB,CAAvB,EAAyB;AACrBD,MAAAA,SAAS,CAAC,EACN,GAAGN,KAAK,CAACQ,eAAN,CAAsBC,IAAtB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASX,KAAK,CAACO,SAA/C;AADG,OAAD,CAAT;AAIH;AACJ,GAPQ,EAON,CAACP,KAAK,CAACO,SAAP,CAPM,CAAT;AASJK,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACO,SAAlB,EAA4BP,KAA5B;;AACI,QAAMc,QAAQ,GAAGT,MAAM,IAAI;AACvBO,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,MAAxB;;AACA,UAAMU,SAAS,GAAG,MAAM;AAEpBX,MAAAA,MAAM,CAAC,IAAD,CAAN;AACAY,MAAAA,OAAO;AACV,KAJD,CAFuB,CAOvB;;;AAEC,QAAI,CAAChB,KAAK,CAACO,SAAP,IAAoB,CAAxB,EAEA;AAAIP,MAAAA,KAAK,CAACiB,iBAAN,CAAwBjB,KAAK,CAACO,SAA9B,EAAyCF,MAAzC,EAAiDU,SAAjD;AACFf,MAAAA,KAAK,CAACO,SAAN,GAAgB,CAAhB;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACO,SAAlB;AACL;;AACC,QAAGP,KAAK,CAACO,SAAN,KAAkB,WAArB,EAAiC;AAC/BK,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACO,SAAlB;AACFP,MAAAA,KAAK,CAACkB,iBAAN,CAAwBb,MAAxB,EAAgCU,SAAhC;AACC;AACF,GAnBD;;AAqBA,QAAMI,cAAc,GAAGC,SAAS,IAAI;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,SAAvB;AACH,GAFD;;AAIA,QAAMJ,OAAO,GAAG,MAAM;AAClBf,IAAAA,IAAI,CAACoB,WAAL;AACAf,IAAAA,SAAS,CAAC,EAAD,CAAT;AAEAN,IAAAA,KAAK,CAACsB,YAAN,CAAmB,CAAnB;AACH,GALD;;AAOA,QAAMC,MAAM,GAAG,MAAM;AACjBtB,IAAAA,IAAI,CAACuB,cAAL,CAAoB;AAChBC,MAAAA,KAAK,EAAE,gBADS;AAGhBC,MAAAA,OAAO,EAAE;AAHO,KAApB;AAKH,GAND;;AAQA,SACI,oBAAC,IAAD,oBACQjC,MADR;AAEI,IAAA,IAAI,EAAEQ,IAFV;AAGI,IAAA,IAAI,EAAC,eAHT;AAII,IAAA,QAAQ,EAAEa,QAJd;AAKI,IAAA,cAAc,EAAEK,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,OADV;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,KAAK,EAAE,CACH;AACIQ,MAAAA,QAAQ,EAAE,IADd;AAEID,MAAAA,OAAO,EAAE;AAFb,KADG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CARJ,EAsBI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,SADV;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,KAAK,EAAE,CACH;AACIC,MAAAA,QAAQ,EAAE;AADd,KADG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CAtBJ,EAmCI,oBAAC,IAAD,CAAM,IAAN,oBAAe9B,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAEmB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAOI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,QAAQ,EAAC,QAA7B;AAAsC,IAAA,OAAO,EAAEO,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPJ,CAnCJ,CADJ;AAiDH,CAvGD;;AAyGA,MAAMK,eAAe,GAAGC,KAAK,KAAK;AAC9BrB,EAAAA,eAAe,EAAEqB,KAAK,CAACC,WAAN,CAAkBC;AADL,CAAL,CAA7B;;AAIA,MAAMC,gBAAgB,GAAG;AACrBd,EAAAA,iBAAiB,EAAE1B,OAAO,CAACyC,MADN;AAErBhB,EAAAA,iBAAiB,EAAEzB,OAAO,CAAC0C;AAFN,CAAzB;AAKA,eAAe3C,OAAO,CAACqC,eAAD,EAAkBI,gBAAlB,CAAP,CAA2CjC,aAA3C,CAAf","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport Form from 'antd/es/form';\r\nimport Input from 'antd/es/input';\r\nimport Button from 'antd/es/button';\r\n \r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\n \r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst FormComponent = ({...props}) => {\r\n    const [form] = Form.useForm();\r\n    const [add, setAdd] = useState(false)\r\n     const [values, setValues] = useState({...props.currentId});\r\n    useEffect(() => {\r\n        if (props.currentId != 0){\r\n            setValues({\r\n                ...props.postMessageList.find(x => x._id == props.currentId)\r\n            })\r\n        \r\n        }\r\n    }, [props.currentId])\r\n\r\nconsole.log(props.currentId,props)\r\n    const onFinish = values => {\r\n        console.log('Success:', values);\r\n        const onSuccess = () => {\r\n           \r\n            setAdd(true)\r\n            onReset()\r\n        }\r\n        //  if  (props.currentId == 0 ){props.createPostMessage(values, onSuccess)}\r\n\r\n         if (!props.currentId == 0 )\r\n          \r\n         {   props.updatePostMessage(props.currentId, values, onSuccess)\r\n           props.currentId=0   \r\n          console.log(props.currentId)\r\n    }\r\n      if(props.currentId==='undefined'){\r\n        console.log(props.currentId)\r\n      props.createPostMessage(values, onSuccess)\r\n      }\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n        setValues('')\r\n        \r\n        props.setCurrentId(0)\r\n    };\r\n\r\n    const onFill = () => {\r\n        form.setFieldsValue({\r\n            title: 'Hardik Motwani',\r\n          \r\n            message: 'Ahmedabad No. 1 Lake Park',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            form={form}\r\n            name=\"control-hooks\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n    \r\n        >\r\n            <Form.Item\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    }\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n \r\n\r\n            <Form.Item\r\n                label=\"Message\"\r\n                name=\"message\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    }\r\n                ]}\r\n            >\r\n                <Input.TextArea />\r\n            </Form.Item>\r\n \r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button htmlType=\"button\" onClick={onReset}>\r\n                    Reset\r\n                </Button>\r\n                <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n                    Fill form\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createPostMessage: actions.create,\r\n    updatePostMessage: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);\r\n"]},"metadata":{},"sourceType":"module"}