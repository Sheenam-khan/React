{"ast":null,"code":"var _jsxFileName = \"/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components/PostMessageForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\nconst initialFieldValues = {\n  title: '',\n  message: ''\n};\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n});\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This field is required.\";\n    temp.message = values.message ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const onSuccess = () => {\n      ButterToast.raise({\n        content: React.createElement(Cinnamon.Crisp, {\n          title: \"Post Box\",\n          content: \"Submitted successfully\",\n          scheme: Cinnamon.Crisp.SCHEME_PURPLE,\n          icon: React.createElement(AssignmentTurnedIn, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        })\n      });\n      resetForm();\n    };\n\n    if (validate()) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n    }\n  };\n\n  return React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: values.title,\n    onChange: handleInputChange\n  }, errors.title && {\n    error: true,\n    helperText: errors.title\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: values.message,\n    onChange: handleInputChange\n  }, errors.message && {\n    error: true,\n    helperText: errors.message\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    className: classes.postBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","ButterToast","Cinnamon","AssignmentTurnedIn","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","classes","props","currentId","setValues","postMessageList","find","x","_id","setErrors","validate","temp","errors","values","Object","every","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","raise","content","Crisp","SCHEME_PURPLE","createPostMessage","updatePostMessage","error","helperText","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\n\nconst initialFieldValues = {\n    title: '',\n    message: ''\n}\n\nconst styles = theme => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1)\n        },\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n    },\n    postBtn: {\n        width: \"50%\"\n    }\n})\n\nconst PostMessageForm = ({ classes, ...props }) => {\n\n    useEffect(() => {\n        if (props.currentId != 0){\n            setValues({\n                ...props.postMessageList.find(x => x._id == props.currentId)\n            })\n            setErrors({})\n        }\n    }, [props.currentId])\n\n    const validate = () => {\n        let temp = { ...errors }\n        temp.title = values.title ? \"\" : \"This field is required.\"\n        temp.message = values.message ? \"\" : \"This field is required.\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x == \"\")\n    }\n\n    var {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFieldValues,props.setCurrentId)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const onSuccess = () => {\n            ButterToast.raise({\n                content: <Cinnamon.Crisp title=\"Post Box\"\n                    content=\"Submitted successfully\"\n                    scheme={Cinnamon.Crisp.SCHEME_PURPLE}\n                    icon={<AssignmentTurnedIn />}\n                />\n            })\n            resetForm()\n        }\n        if (validate()) {\n            if (props.currentId == 0)\n                props.createPostMessage(values, onSuccess)\n            else\n                props.updatePostMessage(props.currentId, values, onSuccess)\n        }\n    }\n\n    return (\n        <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`}\n            onSubmit={handleSubmit}>\n            <TextField\n                name=\"title\"\n                variant=\"outlined\"\n                label=\"Title\"\n                fullWidth\n                value={values.title}\n                onChange={handleInputChange}\n                {...(errors.title && { error: true, helperText: errors.title })}\n            />\n            <TextField\n                name=\"message\"\n                variant=\"outlined\"\n                label=\"Message\"\n                fullWidth\n                multiline\n                rows={4}\n                value={values.message}\n                onChange={handleInputChange}\n                {...(errors.message && { error: true, helperText: errors.message })}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                type=\"submit\"\n                className={classes.postBtn}\n            >Submit</Button>\n        </form>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    postMessageList: state.postMessage.list\n})\n\nconst mapActionToProps = {\n    createPostMessage: actions.create,\n    updatePostMessage: actions.update\n}\n\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));"]},"metadata":{},"sourceType":"module"}