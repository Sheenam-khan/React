{"ast":null,"code":"var _jsxFileName = \"/home/seenam/Desktop/MERN-Stack-CRUD/sheenam/src/components/FormBuilder/FormComponent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Form from \"antd/es/form\";\nimport Input from \"antd/es/input\";\nimport Button from \"antd/es/button\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Redux/postMessage\";\nimport PropTypes from \"prop-types\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nconst FormComponent = ({ ...props\n}) => {\n  const [form] = Form.useForm();\n  const [values, setValues] = useState(\"\");\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n    }\n  }, [props.currentId]);\n  console.log(props.record);\n\n  const onFinish = values => {\n    console.log(\"Success:\", values);\n\n    const onSuccess = () => {\n      props.record = \"\";\n      onReset();\n    };\n\n    if (props.currentId == undefined) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    setValues(\"\");\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      title: \"Seenam Bee\",\n      message: \"bhopal\"\n    });\n  };\n\n  return React.createElement(Form, Object.assign({}, layout, {\n    form: form,\n    name: \"control-hooks\",\n    initialValues: props.record || \"\",\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"Please input your username!\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    label: \"Message\",\n    name: \"message\",\n    rules: [{\n      required: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Button, {\n    htmlType: \"button\",\n    onClick: onReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(Button, {\n    type: \"link\",\n    htmlType: \"button\",\n    onClick: onFill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Fill form\")));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nFormComponent.propTypes = {\n  createPostMessage: PropTypes.func,\n  updatePostMessage: PropTypes.func,\n  postMessageList: PropTypes.array\n};\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/sheenam/src/components/FormBuilder/FormComponent.jsx"],"names":["React","useEffect","useState","Form","Input","Button","connect","actions","PropTypes","layout","labelCol","span","wrapperCol","tailLayout","offset","FormComponent","props","form","useForm","values","setValues","currentId","postMessageList","find","x","_id","console","log","record","onFinish","onSuccess","onReset","undefined","createPostMessage","updatePostMessage","onFinishFailed","errorInfo","resetFields","onFill","setFieldsValue","title","message","required","mapStateToProps","state","postMessage","list","mapActionToProps","create","update","propTypes","func","array"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Form from \"antd/es/form\";\r\nimport Input from \"antd/es/input\";\r\nimport Button from \"antd/es/button\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../Redux/postMessage\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst FormComponent = ({ ...props }) => {\r\n  const [form] = Form.useForm();\r\n  const [values, setValues] = useState(\"\");\r\n  useEffect(() => {\r\n    if (props.currentId != 0) {\r\n      setValues({\r\n        ...props.postMessageList.find((x) => x._id == props.currentId),\r\n      });\r\n    }\r\n  }, [props.currentId]);\r\n  console.log(props.record);\r\n  const onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n    const onSuccess = () => {\r\n      props.record = \"\";\r\n      onReset();\r\n    };\r\n\r\n    if (props.currentId == undefined)\r\n      props.createPostMessage(values, onSuccess);\r\n    else props.updatePostMessage(props.currentId, values, onSuccess);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    setValues(\"\");\r\n  };\r\n\r\n  const onFill = () => {\r\n    form.setFieldsValue({\r\n      title: \"Seenam Bee\",\r\n      message: \"bhopal\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      {...layout}\r\n      form={form}\r\n      name=\"control-hooks\"\r\n      initialValues={props.record || \"\"}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n      <Form.Item\r\n        label=\"Title\"\r\n        name=\"title\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your username!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Message\"\r\n        name=\"message\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input.TextArea />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n        <Button htmlType=\"button\" onClick={onReset}>\r\n          Reset\r\n        </Button>\r\n        <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n          Fill form\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  postMessageList: state.postMessage.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  createPostMessage: actions.create,\r\n  updatePostMessage: actions.update,\r\n};\r\n\r\nFormComponent.propTypes = {\r\n  createPostMessage: PropTypes.func,\r\n  updatePostMessage: PropTypes.func,\r\n  postMessageList: PropTypes.array,\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(FormComponent);\r\n"]},"metadata":{},"sourceType":"module"}