{"ast":null,"code":"var _jsxFileName = \"/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components/PostMessageForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nconst initialFieldValues = {\n  title: '',\n  message: ''\n};\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n});\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  console.log(props);\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This field is required.\";\n    temp.message = values.message ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  let {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, props.setCurrentId);\n  console.log(values);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const onSuccess = () => {\n      resetForm();\n    };\n\n    if (validate()) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n    }\n  };\n\n  return React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: values.title,\n    onChange: handleInputChange\n  }, errors.title && {\n    error: true,\n    helperText: errors.title\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: values.message,\n    onChange: handleInputChange\n  }, errors.message && {\n    error: true,\n    helperText: errors.message\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    className: classes.postBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/components/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","classes","props","console","log","currentId","setValues","postMessageList","find","x","_id","setErrors","validate","temp","errors","values","Object","every","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","createPostMessage","updatePostMessage","error","helperText","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\n \nconst initialFieldValues = {\n    title: '',\n    message: ''\n}\n\nconst styles = theme => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1)\n        },\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n    },\n    postBtn: {\n        width: \"50%\"\n    }\n})\n\nconst PostMessageForm = ({ classes, ...props }) => {\nconsole.log(props)\n    useEffect(() => {\n        if (props.currentId != 0){\n            setValues({\n                ...props.postMessageList.find(x => x._id == props.currentId)\n            })\n            setErrors({})\n        }\n    }, [props.currentId])\n\n    const validate = () => {\n        let temp = { ...errors }\n        temp.title = values.title ? \"\" : \"This field is required.\"\n        temp.message = values.message ? \"\" : \"This field is required.\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x == \"\")\n    }\n\n    let {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFieldValues,props.setCurrentId)\n\n    console.log(values)\n    const handleSubmit = e => {\n        e.preventDefault()\n        const onSuccess = () => {\n            resetForm()\n        }\n        if (validate()) {\n            if (props.currentId == 0)\n                props.createPostMessage(values, onSuccess)\n            else\n                props.updatePostMessage(props.currentId, values, onSuccess)\n        }\n    }\n\n    return (\n        <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`}\n            onSubmit={handleSubmit}>\n            <TextField\n                name=\"title\"\n                variant=\"outlined\"\n                label=\"Title\"\n                fullWidth\n                value={values.title}\n                onChange={handleInputChange}\n                {...(errors.title && { error: true, helperText: errors.title })}\n            />\n            <TextField\n                name=\"message\"\n                variant=\"outlined\"\n                label=\"Message\"\n                fullWidth\n                multiline\n                rows={4}\n                value={values.message}\n                onChange={handleInputChange}\n                {...(errors.message && { error: true, helperText: errors.message })}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                type=\"submit\"\n                className={classes.postBtn}\n            >Submit</Button>\n        </form>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    postMessageList: state.postMessage.list\n})\n\nconst mapActionToProps = {\n    createPostMessage: actions.create,\n    updatePostMessage: actions.update\n}\n\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));"]},"metadata":{},"sourceType":"module"}