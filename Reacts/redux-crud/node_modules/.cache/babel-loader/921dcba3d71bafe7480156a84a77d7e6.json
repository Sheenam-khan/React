{"ast":null,"code":"import { ACTION_TYPES } from \"./postType\";\nconst initialState = {\n  list: []\n}; //postMessage.list\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_ALL:\n      return { ...state,\n        list: [...action.payload]\n      };\n\n    case ACTION_TYPES.CREATE:\n      return { ...state,\n        list: [...state.list, action.payload]\n      };\n\n    case ACTION_TYPES.UPDATE:\n      return { ...state,\n        list: state.list.map(x => x._id == action.payload._id ? action.payload : x)\n      };\n\n    case ACTION_TYPES.DELETE:\n      return { ...state,\n        list: state.list.filter(x => x._id != action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/home/seenam/Desktop/MERN-Stack-CRUD/mern-stack-client/src/Redux/postReducer.js"],"names":["ACTION_TYPES","initialState","list","postReducer","state","action","type","FETCH_ALL","payload","CREATE","UPDATE","map","x","_id","DELETE","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB,C,CAGA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,YAAY,CAACO,SAAlB;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,IAAI,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAX;AAFH,OAAP;;AAIJ,SAAKR,YAAY,CAACS,MAAlB;AACI,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBG,MAAM,CAACG,OAAvB;AAFH,OAAP;;AAIJ,SAAKR,YAAY,CAACU,MAAlB;AACI,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWS,GAAX,CAAeC,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAAP,CAAeK,GAAxB,GAA8BR,MAAM,CAACG,OAArC,GAA+CI,CAAnE;AAFH,OAAP;;AAKJ,SAAKZ,YAAY,CAACc,MAAlB;AACI,aAAO,EACH,GAAGV,KADA;AAEHF,QAAAA,IAAI,EAACE,KAAK,CAACF,IAAN,CAAWa,MAAX,CAAkBH,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAAvC;AAFF,OAAP;;AAKJ;AACI,aAAOJ,KAAP;AAxBR;AA0BH,CA3BD;;AA8BA,eAAgBD,WAAhB","sourcesContent":["import { ACTION_TYPES } from \"./postType\";\n\nconst initialState = {\n    list: []\n}\n//postMessage.list\nconst postReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTION_TYPES.FETCH_ALL:\n            return {\n                ...state,\n                list: [...action.payload]\n            }\n        case ACTION_TYPES.CREATE:\n            return {\n                ...state,\n                list: [...state.list, action.payload]\n            }\n        case ACTION_TYPES.UPDATE:\n            return {\n                ...state,\n                list: state.list.map(x => x._id == action.payload._id ? action.payload : x)\n            }\n\n        case ACTION_TYPES.DELETE:\n            return {\n                ...state,\n                list:state.list.filter(x => x._id != action.payload)\n            }\n\n        default:\n            return state;\n    }\n}\n\n\nexport  default postReducer"]},"metadata":{},"sourceType":"module"}